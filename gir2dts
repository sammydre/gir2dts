#!/usr/bin/env node
/**
 * gir2dts
 * 
 * Convert Gnome Gir bindings file to typescript declarations
 * 
 */
const fs = require('fs')
const os = require('os')
const util = require('util')
const {execSync} = require('child_process')
const {parseString} = require('xml2js')

const cfg = require('./gir2dts.json')
const sym = {}
const gir = {}
let count = Object.keys(cfg.module).length

for (let name in cfg.module) {
    let src = fs.readFileSync(cfg.module[name].source, {encoding: 'utf8'})
    // provide a closure so we know which request completed
    ;(function(name, src){
        parseString(src, (err, res) => { 
            gir[name] = res 
            count--
            console.log(`${count} ${name}`)
            if (count <= 0) build(cfg, gir)
        })
    })(name, src)
}

function build(cfg, gir) {
    const ts = {
        "compilerOptions": {
            "target": "es5",            // es5 compatability for gjs
            "module": "amd",            // pack using amd module format
            "rootDir": "src",           // maodule names based from src
            "allowJs": true,            // amd loader & nodejs modules are js
            "outFile": "index.js"       // the target executable
        },
        "files": [
            "src/gjs.d.ts",
            "src/gjs.js",
            "example/imports.ts",
            "example/record-collection.ts"
        ]
    }
    for (let name in gir) {
        getSymbols(name, gir[name])
    }
    for (let name in cfg.module) {
        let out = []
        out.push(generateModule(name, gir[name], cfg.module[name]))
        fs.writeFileSync(cfg.module[name].output, out.join('\n'))
        ts.files.unshift(cfg.module[name].output)
    }
    fs.writeFileSync("./tsconfig.json", JSON.stringify(ts, null, 2))
}

////////////////////////////////////////////////////////////////////////////////////////////
// pass 1 - generate a symbol table of all known identifiers
////////////////////////////////////////////////////////////////////////////////////////////
function getSymbols(module, gir) {
    let ns = gir.repository.namespace[0]
    if (ns.function) 
        for (let func of ns.function) {
            let name = getName(func.$['name'])
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.enumeration)
        for (let enumeration of ns.enumeration) {
            let name = enumeration.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.bitfield)
        for (let bitfield of ns.bitfield) {
            let name = bitfield.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.class)
        for (let klass of ns.class) {
            let name = klass.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.interface)
        for (let klass of ns.interface) {
            let name = klass.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.record)
        for (let klass of ns.record) {
            let name = klass.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }
    if (ns.callback)
        for (let klass of ns.callback) {
            let name = klass.$['name']
            sym[`${module}.${name}`] = `${module}.${name}`
        }

}
////////////////////////////////////////////////////////////////////////////////////////////
// pass 2 - process each file
////////////////////////////////////////////////////////////////////////////////////////////
function generateModule(name, gir, module) {
    out = ['/**']
    out.push(` * ${name}.d.ts`)
    out.push(' *')
    out.push(' */')
    // out.push(`declare module '${name}' {`)
    if (module.import)
        for (let im of module.import)
            out.push(`    import * as ${im} from "./${im}"`)

    out.push('    import * as gjs from "../starleaf-gjs/ByteArray"')

    switch (typeof module.patch) {
        case 'string':
            out.push(fs.readFileSync(module.patch, {encoding: 'utf8'}))
            addGirInfo(name, gir, {}, module.add, out)
            break
        case 'object':
            addGirInfo(name, gir, module.patch, module.add, out)
            break
        default:
            addGirInfo(name, gir, module.patch, module.add, out)
    }
    // out.push('}')
    return out.join('\n') // fixups:
        .replace(/\: object/g, ": any")
        .replace(/\:object/g, ":any")
        .replace(/\.\.\.args\: any\)/g, "...args: any[])")
        .replace(/argc\: number, argv\: string\[\]/g, "argv:string[]")
}

function gtkDocToJsDoc(doc) {
    let ret = [];

    // Things to fix: &lt; and other entities
    // What to do with C code samples?
    // What to do with links?

    // https://developer.gnome.org/gtk-doc-manual/unstable/documenting_syntax.html.en

    for (let line of doc.split(/\n/g)) {
        for (let word of doc.split(/ /g)) {
            if (word[0] in ['#', '%', '@']) {
                ret.push(word.substring(1));
            } else {
                ret.push(word);
            }
            ret.push(' ');
        }
        if (ret[ret.length-1] == ' ') ret.pop();
        ret.push('\n');
    }
    if (ret[ret.length-1] == '\n') ret.pop();

    return ret.join('');
}

function addDocumentation(obj, indent, out) {
    // TODO: make docs optional
    return;
    
    let doc = obj.doc;
    let doc_dep = obj['doc-deprecated'];

    if (doc) {
        let line = [];
        line.push(indent);
        line.push('/** ');
        line.push(gtkDocToJsDoc(doc[0]._));

        if (doc_dep) {
            line.push('\n\n');
            line.push(gtkDocToJsDoc(doc_dep[0]._));
        }

        line.push(' */');
        out.push(line.join(''));
    } 
}

function addGirInfoForFunctionParameters(modName, parameters, outParams, line, showNames=true) {
    for (let parameter of parameters) {
        let name = getName(parameter.$['name'])
        if (name === '...') name = '...args'

        let nullable = '';

        if ((typeof parameter.$['nullable'] != 'undefined' &&
                parseInt(parameter.$['nullable'])) ||
            (typeof parameter.$['allow-none'] != 'undefined' &&
                parseInt(parameter.$['allow-none']))) {
            nullable = ' | null';
        }

        if (outParams &&
                typeof parameter.$['direction'] != 'undefined' &&
                parameter.$['direction'] == 'out') {
            outParams.push(parameter);
            continue;
        }

        if (showNames) {
            line.push(`${name}: ${getType(modName, parameter)}${nullable}`)
        } else {
            line.push(`/*${name}:*/ ${getType(modName, parameter)}${nullable}`)
        }

        
        line.push(', ')
    }
}

function addGirInfoForClassMethod(modName, pt, method, methods, out) {
    let method_name = method.$['name']

    if (typeof method.$['introspectable'] != 'undefined' &&
        (method.$['introspectable']) == "0") {
        return;
    }

    if (!method_name) {
        method_name = method.$['moved-to'];
    }
    if (!method_name) {
        return;
    }

    if (typeof methods[method_name] != 'undefined') {
        return;
    }
    methods[method_name] = 1

    addDocumentation(method, '        ', out);   

    let line = []
    if (pt && pt[method_name]) {
        out.push('        '+pt[method_name])
    } else {
        line.push(`        ${method_name}(`)
        let outParams = []
        if (method.parameters) {
            if (method.parameters[0].parameter)
                addGirInfoForFunctionParameters(modName, method.parameters[0].parameter, outParams, line)
        }
        if (line[line.length-1] === ', ')
            line[line.length-1] = ")"
        else
            line.push(')')

        if (outParams.length > 0) {
            let retType = getReturnType(modName, method)
            let num = outParams.length
            if (retType && retType != 'void') {
                num++
            }
            if (num > 1) {
                line.push(':[')
            } else {
                line.push(':')
            }
            
            if (retType && retType != 'void') {
                line.push(`/*returnVal:*/ ${retType}`)
                line.push(', ')
            }

            addGirInfoForFunctionParameters(modName, outParams, null, line, false)

            line.pop()

            if (num > 1) {
                line.push(']')
            }
        } else {
            line.push(':')
            line.push(getReturnType(modName, method))
        }
    }
    out.push(line.join(''))
}

function addGirInfoForClassProperty(modName, pt, prop, optional, properties, out) {
    let prop_name = prop.$['name'];

    if (pt && typeof pt[prop_name] != 'undefined') {
            out.push('        '+pt[prop_name])
        return
    }

    if (typeof prop.$['introspectable'] != 'undefined' &&
            prop.$['introspectable'] == '0') {
        return
    }

    let writable = prop.$['writable'];
    let type = getType(modName, prop);
    let safe_name = prop_name.replace(/-/g, '_');

    let line = [];
    line.push('        ');
    if (!writable) line.push('readonly ');
    line.push(safe_name);
    if (optional) line.push('?');
    line.push(': ');
    line.push(type);
    line.push(';');

    addDocumentation(prop, '        ', out);
    out.push(line.join(''));

    if (properties)
        properties[safe_name] = 1
}

function addGirInfoForSignalReturn(modName, klassName, sig, out) {
    out.push(`((`)
    // First arguement is always "self"
    out.push(klassName.toLowerCase() + "_")
    out.push(': ')
    out.push(klassName + "")
    out.push(", ")

    if (sig.parameters) {
        if (sig.parameters[0].parameter)
            addGirInfoForFunctionParameters(modName, sig.parameters[0].parameter, null, out)
    }
    if (out[out.length-1] === ', ')
        out[out.length-1] = ")"
    else
        out.push(')')
    out.push(getReturnTypeArrow(modName, sig))
    out.push(')')
}

function addGirInfoForClass(modName, patch, add, klass, out) {
    let name = klass.$['name']
    let pt = patch ? patch[name] : null
    let ad = add ? add[name] : null
    try {
        let properties = {}

        let parent = null;
        if (klass.$['parent']) {
            parent = klass.$['parent'];
        }

        if (true) {
            let line = []
            line.push(`    type ${name}_SignalNames = `)
            if (parent) {
                line.push(`${parent}_SignalNames | `)
            }
            if (klass['glib:signal']) {
                let pushed = false
                for (let sig of klass['glib:signal']) {
                    let sigName = sig.$['name'];
                    line.push(`"${sigName}"`)
                    line.push(" | ")
                    pushed = true
                }
                if (pushed)
                    line.pop()
            } else {
                line.push('null')
            }

            // notify is special, we can specify e.g. "notify::is-active" to get a notify
            // signal just for the "is-active" property.
            if (klass.property) {
                for (let prop of klass.property) {
                    let propName = prop.$['name']
                    // FIXME: check for properties we should not include here
                    line.push(` | "notify::${propName}"`)
                }
            }

            out.push(line.join(''))

            line = []

            line.push(`    type ${name}_SignalTypes = `)
            if (parent) {
                line.push(`${parent}_SignalTypes | `)
            }
            if (klass['glib:signal']) {
                let pushed = false
                for (let sig of klass['glib:signal']) {
                    line.push(`(`)
                    addGirInfoForSignalReturn(modName, name, sig, line)
                    line.push(')')
                    line.push(' | ')
                    pushed = true
                }
                if (pushed)
                    line.pop()
            } else {
                line.push('null')
            }

            out.push(line.join(''))
        }

        // Make an interface for the properties of this class, extending as the normal
        // class does. We use this for typing the generic constructor.
        if (true) {
            let def = []
            def.push(`    interface ${name}_Parameters`)
            if (klass.$['parent']) 
                def.push(` extends ${klass.$['parent']}_Parameters`)
            def.push(' {')
            out.push(def.join(''))

            if (klass.property) {
                for (let prop of klass.property) {
                    addGirInfoForClassProperty(modName, pt, prop, true, properties, out)
                }
            }

            out.push('    }')
        }

        let def = []
        def.push(`    export interface ${name}`)
        if (klass.$['parent']) 
            def.push(` extends ${klass.$['parent']}`)
        def.push(' {')

        addDocumentation(klass, '    ', out);
        out.push(def.join(''))

        // if (name === "Object") {
        //     console.log(name + " "+ JSON.stringify(ad, null, 2))
        // }
        // if (name === "Settings") {
        //     console.log(name + " "+ JSON.stringify(ad, null, 2))
        // }
        if (ad) {
            for (let mn in ad) {
                out.push('        '+ad[mn])
            }

        }

        /**
         * Methods
         */
        let methods = {}

        // TODO: only add method if the name is not already in properties (?)

        if (klass.method) {
            for (let method of klass.method) {
                addGirInfoForClassMethod(modName, pt, method, methods, out)
            }
        }

        if (klass['virtual-method']) {
            for (let method of klass['virtual-method']) {
                addGirInfoForClassMethod(modName, pt, method, methods, out)
            }
        }

        /* Class properties */
        if (klass.property) {
            for (let prop of klass.property) {
                addGirInfoForClassProperty(modName, pt, prop, false, null, out)
            }
        }

        /* Signals */
        let hasSignals = false

        if (klass.property) {
            // Property change notify. A bit of hard-coding here...
            for (let prop of klass.property) {
                let line = []
                line.push('        ')
                line.push('connect(sigName: "notify::')
                line.push(prop.$['name'])
                line.push('", callback: ((obj_: ')
                line.push(name + "")
                line.push(', pspec: ')
                if (modName != 'GObject') {
                    line.push('GObject.')
                }
                line.push('ParamSpec) => void))')
                out.push(line.join(''))

                hasSignals = true
            }
        }

        if (klass['glib:signal']) {
            // Need signals of superclass too... Ugh
            for (let sig of klass['glib:signal']) {
                addDocumentation(sig, '        ', out)

                let sigName = sig.$['name'];

                let line = []
                line.push('        ')
                line.push('connect(sigName: "')
                line.push(sigName)
                line.push('", callback: ')
                addGirInfoForSignalReturn(modName, name, sig, line)
                line.push("): void")

                out.push(line.join(''))

                hasSignals = true
            }

            
        }

        if (hasSignals) {
            out.push(`        connect(sigName: ${name}_SignalNames, callback: ${name}_SignalTypes): void`)
        }
        
        out.push('    }')


        


        /**
         * Constructors
         */
        if (klass.constructor[0]) {
            out.push(`    export interface ${name}_Constructor {`)
            out.push(`        new (config: ${name}_Parameters): ${name}`)
            out.push('    }')
        }

        if (klass.constructor[0] || klass.function) {
            out.push(`    export declare class ${name}_Constructor {`)
            if (klass.constructor)
                for (let ctor in klass.constructor) {
                    let constructor = klass.constructor[ctor]
                    if (typeof constructor === 'object') {
                        let line = []
                        if (pt && pt[constructor.$['name']]) {
                            out.push('        '+pt[constructor.$['name']])
                            continue
                        } else {
                            line.push(`        ${constructor.$['name']}(`)
                        }

                        if (constructor.parameters) {
                            addGirInfoForFunctionParameters(modName, constructor.parameters[0].parameter, null, line)
                        }
                        if (line[line.length-1] === ', ')
                            line.pop()
                        line.push(`): ${name}`)

                        out.push(line.join(''))
                    }
                }

            /**
             * Static methods (functions)
             */
            if (klass.function)
                for (let func of klass.function) {
                    let func_name = func.$['name']; 
                    //if (func_name === "new") continue // Use standard constructor
                    //if (func_name === "newv") continue // FIXME!
                    let line = []
                    // if (pt && pt[method.$['name']]) {
                    //     out.push('        '+pt[method.$['name']])
                    // } else {
                        line.push(`        ${func_name}(`)
                        if (func.parameters) {
                            if (func.parameters[0].parameter)
                                addGirInfoForFunctionParameters(modName, func.parameters[0].parameter, null, line)
                        }
                        if (line[line.length-1] === ', ')
                            line[line.length-1] = ")"
                        else
                            line.push(')')
                        line.push(':')
                        line.push(getReturnType(modName, func))
                    // }
                    if (func_name) {
                        addDocumentation(func, '        ', out)                
                        out.push(line.join(''))
                    }
                }

            out.push('    }')
            out.push(`    export declare var ${name}: ${name}_Constructor`)
        }


    } catch (e) {
        console.log(e.message)
    }
}

function addGirInfo(modName, gir, patch, add, out) {

    let ns = gir.repository.namespace[0]

    // Constants
    if (ns.constant)
        for (let constant of ns.constant) {
            let name = constant.$['name'] 
            addDocumentation(constant, '    ', out);
            out.push(`    export const ${name}:${getType(modName, constant)}`)
        }

    // Get the requested functions
    if (ns.function) 
        for (let func of ns.function) {
            let name = getName(func.$['name'])

            try {
                let def = []
                def.push(`    export function ${name}(`)
                if (func.parameters) {
                    if (func.parameters[0].parameter)
                        addGirInfoForFunctionParameters(modName, func.parameters[0].parameter, null, def)
                }
                if (def[def.length-1] === ', ')
                    def[def.length-1] = ")"
                else
                    def.push(')')
                def.push(':')
                def.push(getReturnType(modName, func))
                addDocumentation(func, '    ', out);
                out.push(def.join(''))
            } catch (e) {
                console.log(e.message)
            }
        }

    // Get the requested callbacks
    if (ns.callback)
        for (let cb of ns.callback) {
            let cbName = getName(cb.$['name'])

            try {
                addDocumentation(cb, '    ', out);
                out.push(`    export interface ${cbName} {`)

                let def = []
                
                def.push('        (')
                if (cb.parameters) {
                    if (cb.parameters[0].parameter)
                        addGirInfoForFunctionParameters(modName, cb.parameters[0].parameter, null, def)
                }
                if (def[def.length-1] === ', ')
                    def[def.length-1] = ")"
                else
                    def.push(')')
                def.push(':')
                def.push(getReturnType(modName, cb))
                out.push(def.join(''))
                out.push('    }')
            } catch (e) {
                console.log(e.message)
            }
        }

    // Get the requested enums        
    if (ns.enumeration)
        for (let enumeration of ns.enumeration) {
            let name = enumeration.$['name']
            try {
                out.push(`    export enum ${name} {`)
                for (let member of enumeration.member) {
                    let name = member.$['name'].toUpperCase()
                    if (name[0] >= '0' && name[0] <= '9') name = "_"+name
                    out.push(`        ${name},`)
                }
                addDocumentation(enumeration, '    ', out);
                out.push('    }')
            } catch (e) {
                console.log(e.message)
            }
        }

    // Bitfield is a type of enum
    if (ns.bitfield)
        for (let bitfield of ns.bitfield) {
            let name = bitfield.$['name']
            try {
                out.push(`    export enum ${name} {`)
                for (let member of bitfield.member) {
                    let name = member.$['name'].toUpperCase()
                    if (name[0] >= '0' && name[0] <= '9') name = "_"+name
                    out.push(`        ${name},`)
                }
                addDocumentation(bitfield, '    ', out);
                out.push('    }')
            } catch (e) {
                console.log(e.message)
            }
        }

    // Get the requested classes
    if (ns.class)
        for (let klass of ns.class)
            addGirInfoForClass(modName, patch, add, klass, out);

    if (ns.interface)
        for (let klass of ns.interface)
            addGirInfoForClass(modName, patch, add, klass, out);

    if (ns.record)
        for (let klass of ns.record)
            addGirInfoForClass(modName, patch, add, klass, out);
        
    return out.join("\n")
}

/* Fixup: reserved keyword is identifier name */
function getName(name) {
    switch(name) {
        case 'in': return 'in_'
        case 'function': return 'function_'
        case 'true': return 'true_'
        case 'false': return 'false_'
        case 'break': return 'break_'
        case 'arguments': return 'arguments_'
        case 'eval': return 'eval_'
        case 'default': return 'default_'
        case 'new': return 'new_'
    }
    return name
}

/* Decode the type */
function getType(modName, parameter) {
    let [name, isArray] = ['', '']

    if (parameter.array) {
        isArray = '[]'
        if (parameter.array[0].type) {
            name = parameter.array[0].type[0].$['name']
        }
    } else if (parameter.type && parameter.type[0].$ && parameter.type[0].$['name']) {
        name = parameter.type[0].$['name']
    } else {
        return 'any';
    }

    let x = name.split(' ')
    if (x.length === 1) 
        name = x[0]
    else    
        name = x[1]

    if (isArray) {
        switch(name) {
            case 'guint8': return 'gjs.ByteArray'
            case 'gunichar': return 'string'
        }
    }

    switch(name) {
        case '':         return 'any'+isArray
        case 'utf8':     return 'string'+isArray
        case 'none':     return 'void'+isArray
        case 'double':   return 'number'+isArray
        case 'guint32':   return 'number'+isArray
        case 'guint16':   return 'number'+isArray
        case 'gint16':   return 'number'+isArray
        case 'gunichar':   return 'number'+isArray
        case 'gint8':   return 'number'+isArray
        case 'gint32':   return 'number'+isArray
        case 'gushort':   return 'number'+isArray
        case 'gfloat':   return 'number'+isArray
        case 'gboolean': return 'boolean'+isArray
        case 'gpointer': return 'object'+isArray
        case 'gchar':    return 'number'+isArray
        case 'guint':    return 'number'+isArray
        case 'glong':    return 'number'+isArray
        case 'gulong':   return 'number'+isArray
        case 'gint':     return 'number'+isArray
        case 'guint8':   return 'number'+isArray
        case 'guint64':  return 'number'+isArray
        case 'gint64':   return 'number'+isArray
        case 'gdouble':  return 'number'+isArray
        case 'gssize':   return 'number'+isArray
        case 'gsize':    return 'number'+isArray
        case 'long':    return 'number'+isArray
        case 'object':   return 'any'+isArray
        case 'va_list':  return 'any'+isArray
        default:
            if (name.startsWith(`${modName}.`) && sym[name])
                return name.substring(modName.length + 1) + '' + isArray
            else if (sym[name] || sym[`${modName}.${name}`])
                return name + '' + isArray
            else
                return 'any'+isArray
    }
    return '_unknown'+isArray
}

/* Process the return type */
function getReturnType(modName, method) {
    if (method['return-value']) {
        return getType(modName, method['return-value'][0])
    } else return ''
}

function getReturnTypeArrow(modName, method) {
    if (method['return-value']) {
        return ' => '+getType(modName, method['return-value'][0])
    } else return ''
}
